language: python
matrix:
  include:
    - python: "2.6"
      env: STANDALONE=no CYTHON=yes
    - python: "2.7"
      env: STANDALONE=no CYTHON=yes
    - python: "3.3"
      env: STANDALONE=no CYTHON=yes
    - python: "3.4"
      env: STANDALONE=no CYTHON=yes
    - python: "2.7"
      env: STANDALONE=yes CYTHON=no
    - python: "2.7"  # test without installed cython
      env: STANDALONE=no CYTHON=no

# Use miniconda to install binary versions of numpy etc. from continuum
# analytic's repository. Follows an approach described by Dan Blanchard:
# https://gist.github.com/dan-blanchard/7045057
before_install:
- if [ ${TRAVIS_PYTHON_VERSION:0:1} == "2" ]; then wget http://repo.continuum.io/miniconda/Miniconda-2.2.2-Linux-x86_64.sh -O miniconda.sh; else wget http://repo.continuum.io/miniconda/Miniconda3-2.2.2-Linux-x86_64.sh -O miniconda.sh; fi
- chmod +x miniconda.sh
- ./miniconda.sh -b
- export PATH=/home/travis/anaconda/bin:$PATH
# The next couple lines fix a crash with multiprocessing on Travis and are not specific to using Miniconda
- sudo rm -rf /dev/shm
- sudo ln -s /run/shm /dev/shm
# command to install dependencies
install:
  - conda update --yes conda
  - conda create -n travis_conda --yes pip python=$TRAVIS_PYTHON_VERSION numpy scipy nose sphinx ipython sympy pyparsing
  - source activate travis_conda
  - if [[ $CYTHON == 'yes' ]]; then conda install --yes cython; SETUP_ARGS=--with-cython; else SETUP_ARGS=""; fi
  - pip install -q coveralls --use-mirrors
  - python setup.py install $SETUP_ARGS --fail-on-error
# command to run tests (make sure to not run it from the source directory)
script:
- export SRCDIR=$(pwd)
- if [[ $STANDALONE == 'yes' ]]; then SCRIPTFILE=$SRCDIR/dev/tools/run_nose_tests_standalone.py; else SCRIPTFILE=$SRCDIR/dev/tools/run_nose_tests.py; fi
- cd ~;coverage run --rcfile=$SRCDIR/.coveragerc $SCRIPTFILE
# We only report coverage for one Python version
after_success: if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then cp .coverage $SRCDIR; cd $SRCDIR; coveralls; fi
notifications:
  email: false
